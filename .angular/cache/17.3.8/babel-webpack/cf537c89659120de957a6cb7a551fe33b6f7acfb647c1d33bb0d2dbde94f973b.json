{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  var _ApiService;\n  class ApiService {\n    constructor(http) {\n      this.http = http;\n    }\n    getHeaders() {\n      const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');\n      const token = currentUser && currentUser.token ? currentUser.token : ''; // Obtiene el token de localStorage\n      return new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // Incluye el token en el encabezado Authorization\n      });\n    }\n    login(username, password) {\n      const url = 'https://mercadito-app.azurewebsites.net/login';\n      const body = {\n        boleta: username,\n        password: password\n      };\n      return this.http.post(url, body, {\n        observe: 'response'\n      }) // Observa la respuesta completa\n      .pipe(map(response => {\n        if (response.headers.has('Set-Cookie')) {\n          const cookie = response.headers.get('Set-Cookie');\n          if (cookie) {\n            // Divide la cadena de la cookie en partes para obtener el nombre y el valor\n            const cookieParts = cookie.split(';');\n            const cookieNameValue = cookieParts[0].split('=');\n            const cookieName = cookieNameValue[0];\n            const cookieValue = cookieNameValue[1];\n            // Crea un nuevo objeto de cookie con el dominio y la ruta\n            const cookieObject = {\n              [cookieName]: cookieValue,\n              domain: '.mercadito-app.azurewebsites.net',\n              path: '/' // Ruta de la cookie (normalmente \"/\")\n              // Puedes agregar otras opciones de cookie aquí, como 'secure' o 'expires'\n            };\n            // Convierte el objeto de cookie a una cadena y almacénalo\n            document.cookie = Object.entries(cookieObject).map(([key, value]) => `${key}=${value}`).join('; ');\n          }\n        }\n        return response.body;\n      }));\n    }\n    logout() {\n      const url = 'https://mercadito-app.azurewebsites.net/login'; // Endpoint de cierre de sesión\n      return this.http.delete(url, {\n        headers: this.getHeaders(),\n        observe: 'response',\n        responseType: 'text'\n      }).pipe(map(response => {\n        return response.body || '';\n      }));\n    }\n    products() {\n      const url = 'https://mercadito-app.azurewebsites.net/products/data';\n      return this.http.get(url);\n    }\n    getProducts(page) {\n      const params = new HttpParams().set('page', page.toString());\n      const url = 'https://mercadito-app.azurewebsites.net/products/data';\n      return this.http.get(url, {\n        params\n      });\n    }\n    searchProducts(page, query) {\n      const params = new HttpParams().set('page', page.toString()).set('query', query);\n      const url = 'https://mercadito-app.azurewebsites.net/products/search';\n      return this.http.get(url, {\n        params\n      });\n    }\n    productDetails(id) {\n      const url = 'https://mercadito-app.azurewebsites.net/products/data/' + id;\n      return this.http.get(url);\n    }\n    register(jsonData) {\n      const url = 'https://mercadito-app.azurewebsites.net/verify/registration';\n      return this.http.post(url, jsonData, {\n        headers: this.getHeaders(),\n        observe: 'response',\n        responseType: 'text'\n      }) // Incluye los encabezados\n      .pipe(map(response => {\n        return response.body || '';\n      }));\n    }\n    createOrder(orderData) {\n      const url = 'https://mercadito-app.azurewebsites.net/pedidos';\n      return this.http.post(url, orderData, {\n        headers: this.getHeaders(),\n        observe: 'response',\n        responseType: 'text'\n      }) // Incluye los encabezados\n      .pipe(map(response => {\n        return response.body || '';\n      }));\n    }\n  }\n  _ApiService = ApiService;\n  _ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || _ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  _ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _ApiService,\n    factory: _ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}