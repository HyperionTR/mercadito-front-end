{"version":3,"file":"node_modules_stencil_core_internal_client_shadow-css_js.js","mappings":"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","sources":["./node_modules/@stencil/core/internal/client/shadow-css.js"],"sourcesContent":["// src/utils/regular-expression.ts\r\nvar escapeRegExpSpecialCharacters = (text) => {\r\n  return text.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\r\n};\r\n\r\n// src/utils/shadow-css.ts\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n *\r\n * This file is a port of shadowCSS from `webcomponents.js` to TypeScript.\r\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\r\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\r\n */\r\nvar safeSelector = (selector) => {\r\n  const placeholders = [];\r\n  let index = 0;\r\n  selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\r\n    const replaceBy = `__ph-${index}__`;\r\n    placeholders.push(keep);\r\n    index++;\r\n    return replaceBy;\r\n  });\r\n  const content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\r\n    const replaceBy = `__ph-${index}__`;\r\n    placeholders.push(exp);\r\n    index++;\r\n    return pseudo + replaceBy;\r\n  });\r\n  const ss = {\r\n    content,\r\n    placeholders\r\n  };\r\n  return ss;\r\n};\r\nvar restoreSafeSelector = (placeholders, content) => {\r\n  return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\r\n};\r\nvar _polyfillHost = \"-shadowcsshost\";\r\nvar _polyfillSlotted = \"-shadowcssslotted\";\r\nvar _polyfillHostContext = \"-shadowcsscontext\";\r\nvar _parenSuffix = \")(?:\\\\(((?:\\\\([^)(]*\\\\)|[^)(]*)+?)\\\\))?([^,{]*)\";\r\nvar _cssColonHostRe = new RegExp(\"(\" + _polyfillHost + _parenSuffix, \"gim\");\r\nvar _cssColonHostContextRe = new RegExp(\"(\" + _polyfillHostContext + _parenSuffix, \"gim\");\r\nvar _cssColonSlottedRe = new RegExp(\"(\" + _polyfillSlotted + _parenSuffix, \"gim\");\r\nvar _polyfillHostNoCombinator = _polyfillHost + \"-no-combinator\";\r\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\r\nvar _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\r\nvar _selectorReSuffix = \"([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$\";\r\nvar _polyfillHostRe = /-shadowcsshost/gim;\r\nvar createSupportsRuleRe = (selector) => new RegExp(`((?<!(^@supports(.*)))|(?<={.*))(${selector}\\\\b)`, \"gim\");\r\nvar _colonSlottedRe = createSupportsRuleRe(\"::slotted\");\r\nvar _colonHostRe = createSupportsRuleRe(\":host\");\r\nvar _colonHostContextRe = createSupportsRuleRe(\":host-context\");\r\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\r\nvar stripComments = (input) => {\r\n  return input.replace(_commentRe, \"\");\r\n};\r\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\r\nvar extractCommentsWithHash = (input) => {\r\n  return input.match(_commentWithHashRe) || [];\r\n};\r\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\r\nvar _curlyRe = /([{}])/g;\r\nvar _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\r\nvar OPEN_CURLY = \"{\";\r\nvar CLOSE_CURLY = \"}\";\r\nvar BLOCK_PLACEHOLDER = \"%BLOCK%\";\r\nvar processRules = (input, ruleCallback) => {\r\n  const inputWithEscapedBlocks = escapeBlocks(input);\r\n  let nextBlockIndex = 0;\r\n  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\r\n    const selector = m[2];\r\n    let content = \"\";\r\n    let suffix = m[4];\r\n    let contentPrefix = \"\";\r\n    if (suffix && suffix.startsWith(\"{\" + BLOCK_PLACEHOLDER)) {\r\n      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\r\n      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\r\n      contentPrefix = \"{\";\r\n    }\r\n    const cssRule = {\r\n      selector,\r\n      content\r\n    };\r\n    const rule = ruleCallback(cssRule);\r\n    return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\r\n  });\r\n};\r\nvar escapeBlocks = (input) => {\r\n  const inputParts = input.split(_curlyRe);\r\n  const resultParts = [];\r\n  const escapedBlocks = [];\r\n  let bracketCount = 0;\r\n  let currentBlockParts = [];\r\n  for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\r\n    const part = inputParts[partIndex];\r\n    if (part === CLOSE_CURLY) {\r\n      bracketCount--;\r\n    }\r\n    if (bracketCount > 0) {\r\n      currentBlockParts.push(part);\r\n    } else {\r\n      if (currentBlockParts.length > 0) {\r\n        escapedBlocks.push(currentBlockParts.join(\"\"));\r\n        resultParts.push(BLOCK_PLACEHOLDER);\r\n        currentBlockParts = [];\r\n      }\r\n      resultParts.push(part);\r\n    }\r\n    if (part === OPEN_CURLY) {\r\n      bracketCount++;\r\n    }\r\n  }\r\n  if (currentBlockParts.length > 0) {\r\n    escapedBlocks.push(currentBlockParts.join(\"\"));\r\n    resultParts.push(BLOCK_PLACEHOLDER);\r\n  }\r\n  const strEscapedBlocks = {\r\n    escapedString: resultParts.join(\"\"),\r\n    blocks: escapedBlocks\r\n  };\r\n  return strEscapedBlocks;\r\n};\r\nvar insertPolyfillHostInCssText = (cssText) => {\r\n  cssText = cssText.replace(_colonHostContextRe, `$1${_polyfillHostContext}`).replace(_colonHostRe, `$1${_polyfillHost}`).replace(_colonSlottedRe, `$1${_polyfillSlotted}`);\r\n  return cssText;\r\n};\r\nvar convertColonRule = (cssText, regExp, partReplacer) => {\r\n  return cssText.replace(regExp, (...m) => {\r\n    if (m[2]) {\r\n      const parts = m[2].split(\",\");\r\n      const r = [];\r\n      for (let i = 0; i < parts.length; i++) {\r\n        const p = parts[i].trim();\r\n        if (!p) break;\r\n        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\r\n      }\r\n      return r.join(\",\");\r\n    } else {\r\n      return _polyfillHostNoCombinator + m[3];\r\n    }\r\n  });\r\n};\r\nvar colonHostPartReplacer = (host, part, suffix) => {\r\n  return host + part.replace(_polyfillHost, \"\") + suffix;\r\n};\r\nvar convertColonHost = (cssText) => {\r\n  return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\r\n};\r\nvar colonHostContextPartReplacer = (host, part, suffix) => {\r\n  if (part.indexOf(_polyfillHost) > -1) {\r\n    return colonHostPartReplacer(host, part, suffix);\r\n  } else {\r\n    return host + part + suffix + \", \" + part + \" \" + host + suffix;\r\n  }\r\n};\r\nvar convertColonSlotted = (cssText, slotScopeId) => {\r\n  const slotClass = \".\" + slotScopeId + \" > \";\r\n  const selectors = [];\r\n  cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\r\n    if (m[2]) {\r\n      const compound = m[2].trim();\r\n      const suffix = m[3];\r\n      const slottedSelector = slotClass + compound + suffix;\r\n      let prefixSelector = \"\";\r\n      for (let i = m[4] - 1; i >= 0; i--) {\r\n        const char = m[5][i];\r\n        if (char === \"}\" || char === \",\") {\r\n          break;\r\n        }\r\n        prefixSelector = char + prefixSelector;\r\n      }\r\n      const orgSelector = (prefixSelector + slottedSelector).trim();\r\n      const addedSelector = `${prefixSelector.trimEnd()}${slottedSelector.trim()}`.trim();\r\n      if (orgSelector !== addedSelector) {\r\n        const updatedSelector = `${addedSelector}, ${orgSelector}`;\r\n        selectors.push({\r\n          orgSelector,\r\n          updatedSelector\r\n        });\r\n      }\r\n      return slottedSelector;\r\n    } else {\r\n      return _polyfillHostNoCombinator + m[3];\r\n    }\r\n  });\r\n  return {\r\n    selectors,\r\n    cssText\r\n  };\r\n};\r\nvar convertColonHostContext = (cssText) => {\r\n  return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\r\n};\r\nvar convertShadowDOMSelectors = (cssText) => {\r\n  return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, \" \"), cssText);\r\n};\r\nvar makeScopeMatcher = (scopeSelector2) => {\r\n  const lre = /\\[/g;\r\n  const rre = /\\]/g;\r\n  scopeSelector2 = scopeSelector2.replace(lre, \"\\\\[\").replace(rre, \"\\\\]\");\r\n  return new RegExp(\"^(\" + scopeSelector2 + \")\" + _selectorReSuffix, \"m\");\r\n};\r\nvar selectorNeedsScoping = (selector, scopeSelector2) => {\r\n  const re = makeScopeMatcher(scopeSelector2);\r\n  return !re.test(selector);\r\n};\r\nvar injectScopingSelector = (selector, scopingSelector) => {\r\n  return selector.replace(_selectorPartsRe, (_, before = \"\", _colonGroup, colon = \"\", after = \"\") => {\r\n    return before + scopingSelector + colon + after;\r\n  });\r\n};\r\nvar applySimpleSelectorScope = (selector, scopeSelector2, hostSelector) => {\r\n  _polyfillHostRe.lastIndex = 0;\r\n  if (_polyfillHostRe.test(selector)) {\r\n    const replaceBy = `.${hostSelector}`;\r\n    return selector.replace(_polyfillHostNoCombinatorRe, (_, selector2) => injectScopingSelector(selector2, replaceBy)).replace(_polyfillHostRe, replaceBy + \" \");\r\n  }\r\n  return scopeSelector2 + \" \" + selector;\r\n};\r\nvar applyStrictSelectorScope = (selector, scopeSelector2, hostSelector) => {\r\n  const isRe = /\\[is=([^\\]]*)\\]/g;\r\n  scopeSelector2 = scopeSelector2.replace(isRe, (_, ...parts) => parts[0]);\r\n  const className = \".\" + scopeSelector2;\r\n  const _scopeSelectorPart = (p) => {\r\n    let scopedP = p.trim();\r\n    if (!scopedP) {\r\n      return \"\";\r\n    }\r\n    if (p.indexOf(_polyfillHostNoCombinator) > -1) {\r\n      scopedP = applySimpleSelectorScope(p, scopeSelector2, hostSelector);\r\n    } else {\r\n      const t = p.replace(_polyfillHostRe, \"\");\r\n      if (t.length > 0) {\r\n        scopedP = injectScopingSelector(t, className);\r\n      }\r\n    }\r\n    return scopedP;\r\n  };\r\n  const safeContent = safeSelector(selector);\r\n  selector = safeContent.content;\r\n  let scopedSelector = \"\";\r\n  let startIndex = 0;\r\n  let res;\r\n  const sep = /( |>|\\+|~(?!=))\\s*/g;\r\n  const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\r\n  let shouldScope = !hasHost;\r\n  while ((res = sep.exec(selector)) !== null) {\r\n    const separator = res[1];\r\n    const part2 = selector.slice(startIndex, res.index).trim();\r\n    shouldScope = shouldScope || part2.indexOf(_polyfillHostNoCombinator) > -1;\r\n    const scopedPart = shouldScope ? _scopeSelectorPart(part2) : part2;\r\n    scopedSelector += `${scopedPart} ${separator} `;\r\n    startIndex = sep.lastIndex;\r\n  }\r\n  const part = selector.substring(startIndex);\r\n  shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\r\n  scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\r\n  return restoreSafeSelector(safeContent.placeholders, scopedSelector);\r\n};\r\nvar scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\r\n  return selector.split(\",\").map((shallowPart) => {\r\n    if (slotSelector && shallowPart.indexOf(\".\" + slotSelector) > -1) {\r\n      return shallowPart.trim();\r\n    }\r\n    if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\r\n      return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\r\n    } else {\r\n      return shallowPart.trim();\r\n    }\r\n  }).join(\", \");\r\n};\r\nvar scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\r\n  return processRules(cssText, (rule) => {\r\n    let selector = rule.selector;\r\n    let content = rule.content;\r\n    if (rule.selector[0] !== \"@\") {\r\n      selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\r\n    } else if (rule.selector.startsWith(\"@media\") || rule.selector.startsWith(\"@supports\") || rule.selector.startsWith(\"@page\") || rule.selector.startsWith(\"@document\")) {\r\n      content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector);\r\n    }\r\n    const cssRule = {\r\n      selector: selector.replace(/\\s{2,}/g, \" \").trim(),\r\n      content\r\n    };\r\n    return cssRule;\r\n  });\r\n};\r\nvar scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\r\n  cssText = insertPolyfillHostInCssText(cssText);\r\n  cssText = convertColonHost(cssText);\r\n  cssText = convertColonHostContext(cssText);\r\n  const slotted = convertColonSlotted(cssText, slotScopeId);\r\n  cssText = slotted.cssText;\r\n  cssText = convertShadowDOMSelectors(cssText);\r\n  if (scopeId) {\r\n    cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\r\n  }\r\n  cssText = replaceShadowCssHost(cssText, hostScopeId);\r\n  cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, \" $1 \");\r\n  return {\r\n    cssText: cssText.trim(),\r\n    // We need to replace the shadow CSS host string in each of these selectors since we created\r\n    // them prior to the replacement happening in the components CSS text.\r\n    slottedSelectors: slotted.selectors.map((ref) => ({\r\n      orgSelector: replaceShadowCssHost(ref.orgSelector, hostScopeId),\r\n      updatedSelector: replaceShadowCssHost(ref.updatedSelector, hostScopeId)\r\n    }))\r\n  };\r\n};\r\nvar replaceShadowCssHost = (cssText, hostScopeId) => {\r\n  return cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\r\n};\r\nvar scopeCss = (cssText, scopeId, commentOriginalSelector) => {\r\n  const hostScopeId = scopeId + \"-h\";\r\n  const slotScopeId = scopeId + \"-s\";\r\n  const commentsWithHash = extractCommentsWithHash(cssText);\r\n  cssText = stripComments(cssText);\r\n  const orgSelectors = [];\r\n  if (commentOriginalSelector) {\r\n    const processCommentedSelector = (rule) => {\r\n      const placeholder = `/*!@___${orgSelectors.length}___*/`;\r\n      const comment = `/*!@${rule.selector}*/`;\r\n      orgSelectors.push({ placeholder, comment });\r\n      rule.selector = placeholder + rule.selector;\r\n      return rule;\r\n    };\r\n    cssText = processRules(cssText, (rule) => {\r\n      if (rule.selector[0] !== \"@\") {\r\n        return processCommentedSelector(rule);\r\n      } else if (rule.selector.startsWith(\"@media\") || rule.selector.startsWith(\"@supports\") || rule.selector.startsWith(\"@page\") || rule.selector.startsWith(\"@document\")) {\r\n        rule.content = processRules(rule.content, processCommentedSelector);\r\n        return rule;\r\n      }\r\n      return rule;\r\n    });\r\n  }\r\n  const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\r\n  cssText = [scoped.cssText, ...commentsWithHash].join(\"\\n\");\r\n  if (commentOriginalSelector) {\r\n    orgSelectors.forEach(({ placeholder, comment }) => {\r\n      cssText = cssText.replace(placeholder, comment);\r\n    });\r\n  }\r\n  scoped.slottedSelectors.forEach((slottedSelector) => {\r\n    const regex = new RegExp(escapeRegExpSpecialCharacters(slottedSelector.orgSelector), \"g\");\r\n    cssText = cssText.replace(regex, slottedSelector.updatedSelector);\r\n  });\r\n  return cssText;\r\n};\r\nexport {\r\n  scopeCss\r\n};\r\n"],"names":["escapeRegExpSpecialCharacters","text","replace","safeSelector","selector","placeholders","index","_","keep","replaceBy","push","content","pseudo","exp","ss","restoreSafeSelector","_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_selectorReSuffix","_polyfillHostRe","createSupportsRuleRe","_colonSlottedRe","_colonHostRe","_colonHostContextRe","_commentRe","stripComments","input","_commentWithHashRe","extractCommentsWithHash","match","_ruleRe","_curlyRe","_selectorPartsRe","OPEN_CURLY","CLOSE_CURLY","BLOCK_PLACEHOLDER","processRules","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","m","suffix","contentPrefix","startsWith","blocks","substring","length","cssRule","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","join","strEscapedBlocks","insertPolyfillHostInCssText","cssText","convertColonRule","regExp","partReplacer","parts","r","i","p","trim","colonHostPartReplacer","host","convertColonHost","colonHostContextPartReplacer","indexOf","convertColonSlotted","slotScopeId","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimEnd","updatedSelector","convertColonHostContext","convertShadowDOMSelectors","reduce","result","pattern","makeScopeMatcher","scopeSelector2","lre","rre","selectorNeedsScoping","re","test","injectScopingSelector","scopingSelector","before","_colonGroup","colon","after","applySimpleSelectorScope","hostSelector","lastIndex","selector2","applyStrictSelectorScope","isRe","className","_scopeSelectorPart","scopedP","t","safeContent","scopedSelector","startIndex","res","sep","hasHost","shouldScope","exec","separator","part2","slice","scopedPart","scopeSelector","scopeSelectorText","slotSelector","map","shallowPart","scopeSelectors","commentOriginalSelector","scopeCssText","scopeId","hostScopeId","slotted","replaceShadowCssHost","slottedSelectors","ref","scopeCss","commentsWithHash","orgSelectors","processCommentedSelector","placeholder","comment","scoped","forEach","regex"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}